#!/usr/bin/env node

/**
 * Module dependencies.
 */
const CONFIG   = require('../app_init/config')
const debug    = require('debug')('app:server');
const http     = require('http');
const socketIo = require('socket.io');


(async () => {
  try {
    const socketconnect = await require('./../HELPERS/socket/socket');
    const DB_HEALTH = await require('./../db/mysql/models/sequelize');
    const app = await require('../app')();
    startApp(app, socketconnect);
  } catch (error) {
    console.log(error, 333333)
    const app = await require('../app')(error.cause.message);
    startApp(app);
  }
})()

function startApp(app, socketconnect) {
  var port = normalizePort(CONFIG.node_port);
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);
  if (socketconnect) {
    const io = socketIo(server);
    socketconnect(io);
    app.set('io', io);
  }
  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port, () => console.log(`${CONFIG.app_name} running in port ${port} mode--${CONFIG.config_id}`));
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}
